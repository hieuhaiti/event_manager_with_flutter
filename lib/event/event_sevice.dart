import 'package:event_manager_with_flutter/event/event_model.dart';
import 'package:localstore/localstore.dart';

class EventSevice {
  /// Initializes a singleton instance of `Localstore` with support for the
  /// application's support directory enabled.
  ///
  /// This instance is used for local data storage and retrieval within the
  /// application.
  ///
  
  final db = Localstore.getInstance(useSupportDir: true);

  // name collection
  final String collectionName = 'events';

  // get all events
  Future<List<EventModel>> getEvents() async {
    final events = await db.collection(collectionName).get();
    if (events == null) {
      return []; // return an empty list if events is null
    }
    return events.entries.map((entry) {
      final eventData = entry.value as Map<String, dynamic>;
      if (!eventData.containsKey("id")) {
        eventData["id"] = entry.key.split('/').last;
      }
      return EventModel.fromMap(eventData);
    }).toList();
  }

  // save event
  Future<void> saveEvent(EventModel event) async {
    /// Assigns a unique identifier to the event if it doesn't already have one.
    ///
    /// This line of code checks if the `id` property of the `event` object is null.
    /// If it is null, it assigns a new unique identifier generated by the Firestore
    /// database to the `id` property. The unique identifier is created by calling
    /// the `doc()` method on the collection reference obtained from the Firestore
    /// database, which generates a new document reference with a unique ID.
    event.id ??= db.collection(collectionName).doc().id;
    await db.collection(collectionName).doc(event.id).set(event.toMap());
  }

  // delete event
  Future<void> deleteEvent(String id) async {
    await db.collection(collectionName).doc(id).delete();
  }
}
